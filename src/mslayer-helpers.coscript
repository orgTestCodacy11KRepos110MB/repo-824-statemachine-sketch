/**
 * MSLayer Helpers Module
 */

var msl = (function() {

  var predicateGroupLayers =
    [NSPredicate predicateWithFormat:@"self isMemberOfClass:%@", [MSLayerGroup class]]
  var predicateShapeLayers =
    [NSPredicate predicateWithFormat:@"self isMemberOfClass:%@", [MSShapeGroup class]]

  // NSPredicate -> (->)
  var _makeLayersFilter = function(predicate) {
    return function(layers) {
      return [layers filteredArrayUsingPredicate:predicate]
    }
  }

  // NSArray -> NSArray
  var getGroupLayers = _makeLayersFilter(predicateGroupLayers)

  // NSArray -> NSArray
  var getShapeLayers = _makeLayersFilter(predicateShapeLayers)

  // NSArray, String -> NSArray
  var getLayersWithSubstringInName = function(layers, substring) {
    var predicateLayersWithSubstringInName =
      [NSPredicate predicateWithFormat:@"name CONTAINS %@", substring]

    return _makeLayersFilter(predicateLayersWithSubstringInName)(layers)
  }

  // NSArray, String -> MSLayer
  var getLayerByIdInName = function(layers, id) {
    var result = undefined
    // Regex: /.+::id\b/
    var regex = ['.+', keyString, id].join('')
    var predicateNameMatchesRegex =
      [NSPredicate predicateWithFormat:@"name MATCHES %@", regex]
    var resultLayers =
      [layers filteredArrayUsingPredicate:predicateNameMatchesRegex]

    if (isNSArrayExist(resultLayers)) {
      result = [resultLayers objectAtIndex:0]
    }

    return result
  }

  // NSArray -> MSLayer
  var getLayerWithDistinctStyle = function(layers) {
    if ([layers count] < 3) {
      return undefined
    }

    var indexOfFirst  = 0
    var indexOfSecond = 1
    var indexOfPenultimate = [layers count] - 2
    var indexOfLast        = [layers count] - 1

    for (var i = indexOfSecond; i < indexOfLast; i++) {
      var currentLayer  = [layers objectAtIndex:i]
      var previousLayer = [layers objectAtIndex:i-1]
      var nextLayer     = [layers objectAtIndex:i+1]

      if (!mss.areStylesEqual([currentLayer style], [previousLayer style]) &&
          !mss.areStylesEqual([currentLayer style], [nextLayer style])) {
        return currentLayer
      }
    }

    if (!mss.areStylesEqual([[layers objectAtIndex:indexOfFirst] style],
                            [[layers objectAtIndex:indexOfSecond] style])) {
      return [layers objectAtIndex:indexOfFirst]
    }

    if (!mss.areStylesEqual([[layers objectAtIndex:indexOfLast] style],
                            [[layers objectAtIndex:indexOfPenultimate] style])) {
      return [layers objectAtIndex:indexOfLast]
    }

    return undefined
  }

  // NSArray -> bool
  var isNSArrayExist = function(nsarray) {
    return nsarray && [nsarray count] > 0
  }

  return {
    getGroupLayers     : getGroupLayers,
    getShapeLayers     : getShapeLayers,
    getLayerByIdInName : getLayerByIdInName,
    isNSArrayExist     : isNSArrayExist,
    getLayerWithDistinctStyle    : getLayerWithDistinctStyle,
    getLayersWithSubstringInName : getLayersWithSubstringInName
  }
})()
